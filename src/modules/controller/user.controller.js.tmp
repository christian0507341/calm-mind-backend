// src/modules/controller/user.controller.js
import User from "../auth/model/user.model.js";
import GetStartedProfile from "../getStarted/model/getStarted.model.js";
import bcrypt from "bcryptjs";
import { generateToken } from "../../utils/jwt.js";
import crypto from "crypto";

// -------------------- EMAIL SENDER (TERMINAL) --------------------
const sendEmail = async (to, subject, text) => {
  // For testing, print emails to terminal
  console.log("--------------------------------------------------");
  console.log(`To: ${to}`);
  console.log(`Subject: ${subject}`);
  console.log(`Text: ${text}`);
  console.log("--------------------------------------------------");
};

// -------------------- REGISTER --------------------
export const registerUser = async (req, res) => {
  try {
    const { name, email, password, role } = req.body;
    if (!name || !email || !password) {
      return res
        .status(400)
        .json({ message: "Name, email, and password are required" });
    }

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email))
      return res.status(400).json({ message: "Invalid email format" });
    if (password.length < 6)
      return res
        .status(400)
        .json({ message: "Password must be at least 6 characters long" });

    const existingUser = await User.findOne({ email: email.toLowerCase() });
    if (existingUser)
      return res.status(400).json({ message: "Email already registered" });

    const newUser = new User({
      name,
      email: email.toLowerCase(),
      password,
      role: role || "user",
      isVerified: true // Auto-verify for development
    });

    await newUser.save();
    console.log('✅ User registered and auto-verified:', newUser.email);

    res.status(201).json({
      message: "User registered successfully",
      user: {
        id: newUser._id,
        name: newUser.name,
        email: newUser.email,
        role: newUser.role,
      },
    });
  } catch (err) {
    console.error("Registration error:", err);
    res
      .status(500)
      .json({ message: "Error registering user", error: err.message });
  }
};

// -------------------- VERIFY EMAIL --------------------
export const verifyEmail = async (req, res) => {
  try {
    const { token } = req.params;
    const hashedToken = crypto.createHash("sha256").update(token).digest("hex");

    const user = await User.findOne({ verificationToken: hashedToken });
    if (!user)
      return res
        .status(400)
        .json({ message: "Invalid or expired verification token" });

    user.isVerified = true;
    user.verificationToken = undefined;
    await user.save();

    res
      .status(200)
      .json({ message: "Email verified successfully. You can now log in." });
  } catch (err) {
    console.error("Email verification error:", err);
    res
      .status(500)
      .json({ message: "Error verifying email", error: err.message });
  }
};

// -------------------- RESEND VERIFICATION --------------------
export const resendVerification = async (req, res) => {
  try {
    const { email } = req.body;
    if (!email) {
      return res.status(400).json({ message: "Email is required" });
    }

    const user = await User.findOne({ email: email.toLowerCase() });
    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }

    if (user.isVerified) {
      return res.status(400).json({ message: "Email is already verified" });
    }

    // For development, auto-verify the user
    user.isVerified = true;
    await user.save();
    
    console.log('✅ User auto-verified:', user.email);

    res.status(200).json({ 
      message: "Email verified successfully",
      user: {
        id: user._id,
        name: user.name,
        email: user.email,
        role: user.role
      }
    });
  } catch (err) {
    console.error("Resend verification error:", err);
    res.status(500).json({ message: "Error resending verification", error: err.message });
  }
};

[REST OF THE FILE CONTENT...]